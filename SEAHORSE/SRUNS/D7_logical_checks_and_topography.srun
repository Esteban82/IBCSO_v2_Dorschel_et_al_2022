#!/usr/bin/bash
#SBATCH --ntasks=1
#SBATCH --nodes=1
#SBATCH --cpus-per-task=12
#Xsrun I know what I am doing

module purge 2>/dev/null
module load ${CONDA} ${NCO} 2>/dev/null
source activate ${CONDA_ENV}
which python

START_TIME=$(date -u +"%Y-%m-%d %T")
START_UNIX=$(date -u +%s%3N)
echo "SLURM_JOBID:	$SLURM_JOBID"
echo "EVOKER:	$EVOKER"
echo "START TIME:	$START_TIME"

export SSD_DIR=$(getSSD)  # get new ssd dir from tmp/tmp_$SLURM_JOBID
cd ${SSD_DIR}

# files on isibhv
COMPOSITE_FILE="${RASTERPRODUCT}/${timestamp}_median_composite_with_SRTM.tif"
RID_FILE="${RASTERPRODUCT}/${timestamp}_rid_low.tif"
TID_FILE="${RASTERPRODUCT}/${timestamp}_tid_low.tif"
Q25_FILE="${RASTERPRODUCT}/${timestamp}_q25_composite.tif"
Q75_FILE="${RASTERPRODUCT}/${timestamp}_q75_composite.tif"
SRTM_INFILL_MASK="${RASTERPRODUCT}/${timestamp}_SRTM15_infill_mask.tif"

# files on SSD
##---input
SSD_COMPOSITE="${SSD_DIR}/$(basename ${COMPOSITE_FILE})"
SSD_RID="${SSD_DIR}/$(basename ${RID_FILE})"
SSD_TID="${SSD_DIR}/$(basename ${TID_FILE})"
SSD_ICESURFACE="${SSD_DIR}/$(basename ${STATIC_BEDMACHINE_ICESURFACE})"
SSD_MASK_SOUTH_50_DEG="${SSD_DIR}/$(basename ${STATIC_MASK_SOUTH_50_DEG})"
SSD_Q25_FILE="${SSD_DIR}/$(basename ${Q25_FILE})"
SSD_Q75_FILE="${SSD_DIR}/$(basename ${Q75_FILE})"
SSD_SRTM_INFILL_MASK="${SSD_DIR}/$(basename ${SRTM_INFILL_MASK})" # generated by python script; 1: infilled, 0: not infilled
##---output
SSD_ICESURFACE_MASK="${SSD_DIR}/${timestamp}_ice-surface_mask.tif"
SSD_OCEAN_MASK="${SSD_DIR}/${timestamp}_ocean_mask.tif"
SSD_IBCSO_BED="${SSD_DIR}/${timestamp}_IBCSO_bed.tif"
SSD_IBCSO_BED_TMP="${SSD_DIR}/${timestamp}_IBCSO_bed_TMP.tif"
SSD_IBCSO_BED_WGS84="${SSD_DIR}/${timestamp}_IBCSO_bed_WGS84.tif"
SSD_IBCSO_ICESURF="${SSD_DIR}/${timestamp}_IBCSO_ice-surface.tif"
SSD_IBCSO_ICESURF_TMP="${SSD_DIR}/${timestamp}_IBCSO_ice-surface_TMP.tif"
SSD_IBCSO_ICESURF_WGS84="${SSD_DIR}/${timestamp}_IBCSO_ice-surface_WGS84.tif"
SSD_STD_DEV="${SSD_DIR}/${timestamp}_IBCSO_composite_std_dev.tif"
SSD_RID_SRTM="${SSD_DIR}/${timestamp}_rid_low_SRTM.tif"
SSD_RID_SRTM_TMP="${SSD_DIR}/${timestamp}_rid_low_SRTM_tmp.tif" #"${SSD_RID_SRTM%.*}_tmp.tif"
SSD_TID_SRTM="${SSD_DIR}/${timestamp}_tid_low_SRTM.tif"
SSD_TID_SRTM_TMP="${SSD_DIR}/${timestamp}_tid_low_SRTM_tmp.tif" #"${SSD_TID_SRTM%.*}_tmp.tif"

cp ${COMPOSITE_FILE} ${SSD_COMPOSITE}
cp ${RID_FILE} ${SSD_RID}
cp ${TID_FILE} ${SSD_TID}
cp ${STATIC_BEDMACHINE_ICESURFACE} ${SSD_ICESURFACE}
cp ${STATIC_MASK_SOUTH_50_DEG} ${SSD_MASK_SOUTH_50_DEG}
cp ${Q25_FILE} ${SSD_Q25_FILE}
cp ${Q75_FILE} ${SSD_Q75_FILE}
cp ${SRTM_INFILL_MASK} ${SSD_SRTM_INFILL_MASK}

# GDAL settings
RASTEROUTPUT_COMPRESSION=$(echo ${RASTEROUTPUT_COMPRESSION} "-co NUM_THREADS=${SLURM_CPUS_PER_TASK}") # append number of threads (set with --cpus-per-task)
COMPRESSION_PY=$(echo "${RASTEROUTPUT_COMPRESSION}" | sed 's/-co /--co=/g') # adjust compression string to fit python module...
TILES_PY=$(echo "${RASTEROUTPUT_TILES}" | sed 's/-co /--co=/g') # adjust raster tile settings string to fit python module...
GDAL_CACHEMAX=9000 			# approx. 1/3 of total RAM
MEM=1000					# memory for caching (MB)
NODATA=-32768

echo -e "\n[INFO]    Updating RID & TID rasters with SRTM15 values (rid:${SRTM_RID}, tid:${SRTM_TID})..."
# RID with SRTM15
srun gdal_calc.py -A ${SSD_SRTM_INFILL_MASK}  --calc="(A==1)*${SRTM_RID}+(A==0)*-32768" --NoDataValue=-32768 --type=Int16 ${COMPRESSION_PY} ${TILES_PY} --outfile=${SSD_RID_SRTM_TMP}
srun gdal_merge.py -n -32768 -a_nodata -32768 -ot Int16 -of GTiff ${RASTEROUTPUT_COMPRESSION} ${RASTEROUTPUT_TILES} -o ${SSD_RID_SRTM} ${SSD_RID} ${SSD_RID_SRTM_TMP}
# TID  with SRTM15: initialised with TID 41 to fill interpolated areas of any kind
srun gdal_calc.py -A ${SSD_SRTM_INFILL_MASK}  --calc="(A==1)*${SRTM_TID}+(A==0)*-32768" --NoDataValue=-32768 --type=Int16 ${COMPRESSION_PY} ${TILES_PY} --outfile=${SSD_TID_SRTM_TMP}
srun gdal_merge.py -init "41" -n -32768 -a_nodata -32768 -ot Int16 -of GTiff ${RASTEROUTPUT_COMPRESSION} ${RASTEROUTPUT_TILES} -o ${SSD_TID_SRTM} ${SSD_TID} ${SSD_TID_SRTM_TMP}

# ICE-SURFACE MASK (1: custom Bedmachine ice-surface areas, 0: else)
echo "[INFO]    Creating ICE-SURFACE MASK..."
srun gdal_edit.py -unsetnodata ${SSD_ICESURFACE} # IMPORTANT: otherwise NaN cell are not included in raster calculation!
srun gdal_edit.py -unsetnodata ${SSD_RID} # IMPORTANT: otherwise NaN cell are not included in raster calculation!
# RID 300-399: static topography files, RID 401: static steering points (topography)
srun gdal_calc.py -A ${SSD_ICESURFACE} -B ${SSD_RID} --calc="(A>0)*((B<300)+(B==400)+(B>401))" --NoDataValue=${NODATA} --type=Int16 ${COMPRESSION_PY} ${TILES_PY} --outfile=${SSD_ICESURFACE_MASK}

# OCEAN MASK (1: ocean, 0: land/ice)
echo "[INFO]    Creating OCEAN MASK..."
## unsetnodata & reclassify RID grid --> add bedmachine ice-surface mask
# RID 300-399: static topography files, RID 401: static steering points (topography)
srun gdal_calc.py -A ${SSD_RID} -B ${SSD_ICESURFACE_MASK} --calc="((A<300)+(A==400)+(A>401))*(B==0)" --NoDataValue=${NODATA} --type=Int16 ${COMPRESSION_PY} ${TILES_PY} --outfile=${SSD_OCEAN_MASK}

# LOGICAL CHECKS (IBCSO with bedmachine sub-ice topography)
echo "[INFO]    Performing logical checks and creating IBCSO grid with bedmachine sub-ice topography..."
# (C==1)*(A<=-1)*A: 		"ocean cell" & "IBCSO=<-1" 								>>> "IBCSO"
# (C==1)*(A>-1)*(-1): 		"ocean cell" & "IBCSO>-1" 								>>> set cell value to "-1"!
# (C==0)*(B==0)*(A<0)*1: 	"non ocean cell" & "non ice-surface cell" & "IBCSO<0" 	>>> set cell value to "1"!
# (C==0)*(B==1)*(A<0)*A: 	"non ocean cell" & "ice-surface cell" & "IBCSO<0" 		>>> "IBCSO" (gridded sub-ice topography)
# (C==0)*(A>=0)*A: 			"non ocean cell" & "IBCSO>=0" 							>>> "IBCSO"
srun gdal_calc.py -A ${SSD_COMPOSITE} -B ${SSD_ICESURFACE_MASK} -C ${SSD_OCEAN_MASK} --calc="(C==1)*(A<=-1)*A + (C==1)*(A>-1)*(-1) + (C==0)*(B==0)*(A<0)*1 + (C==0)*(B==1)*(A<0)*A + (C==0)*(A>=0)*A" --NoDataValue=${NODATA} --type=Int16 ${COMPRESSION_PY} ${TILES_PY} --outfile=${SSD_IBCSO_BED_TMP}

# CREATE IBCSO with ICE-SURFACE TOPOGRAPHY
echo "[INFO]    Creating IBCSO grid with bedmachine ice-surface topography..."
srun gdal_calc.py -A ${SSD_IBCSO_BED_TMP} -B ${SSD_ICESURFACE} -C ${SSD_ICESURFACE_MASK} --calc="A*(C==0)+B*(C==1)" --NoDataValue=${NODATA} --type=Int16 ${COMPRESSION_PY} ${TILES_PY} --outfile=${SSD_IBCSO_ICESURF_TMP}

# CLIP & REPROJECT
echo "[INFO]    Clip & reproject GeoTIFFs to 50 deg South..."
#---CLIP TO 50 deg South
echo "[INFO]       >>> Masking IBCSO grid(s) to 60 degree South..."
srun gdal_calc.py -A ${SSD_IBCSO_BED_TMP} -B${SSD_MASK_SOUTH_50_DEG} --calc="(B==1)*A+(B==0)*(-32768)" --NoDataValue=${NODATA} ${COMPRESSION_PY} ${TILES_PY} --outfile=${SSD_IBCSO_BED}
srun gdal_calc.py -A ${SSD_IBCSO_ICESURF_TMP} -B${SSD_MASK_SOUTH_50_DEG} --calc="(B==1)*A+(B==0)*(-32768)" --NoDataValue=${NODATA} ${COMPRESSION_PY} ${TILES_PY} --outfile=${SSD_IBCSO_ICESURF}

#---CONVERT TO WGS84 (and CLIP)
echo "[INFO]       >>> Clip & reproject unmasked IBCSO grid(s) to WGS84 [EPSG:4326]..."
srun gdalwarp -t_srs EPSG:4326 -te ${RASTEROUTPUT_REGION_WGS84} -tr ${RASTEROUTPUT_RESO_WGS84} -ot Int16 -dstnodata ${NODATA} ${RASTEROUTPUT_FORMAT} -r near -wm ${MEM} -multi ${RASTEROUTPUT_COMPRESSION} ${RASTEROUTPUT_TILES} ${SSD_IBCSO_BED_TMP} ${SSD_IBCSO_BED_WGS84}
srun gdalwarp -t_srs EPSG:4326 -te ${RASTEROUTPUT_REGION_WGS84} -tr ${RASTEROUTPUT_RESO_WGS84} -ot Int16 -dstnodata ${NODATA} ${RASTEROUTPUT_FORMAT} -r near -wm ${MEM} -multi ${RASTEROUTPUT_COMPRESSION} ${RASTEROUTPUT_TILES} ${SSD_IBCSO_ICESURF_TMP} ${SSD_IBCSO_ICESURF_WGS84}

# APPROXIMATE STANDARD DEVIATION FOR COMPOSITE GRID
echo "[INFO]    Calculating standard deviation for composite raster (surface + nearneighbor)..."
srun gdal_calc.py -A ${SSD_Q75_FILE} -B ${SSD_Q25_FILE} --calc="(A-B)/1.35" --type=Float32 ${COMPRESSION_PY} ${TILES_PY} --outfile=${SSD_STD_DEV}
srun gdal_edit.py -stats ${SSD_STD_DEV}

# CONVERT TO NETCDF & SET METADATA
echo -e "[INFO]    Converting to \"netCDF\" & adding metadata..."
## Digital Bathymetrey Models (DBM)
for DBM in ${SSD_IBCSO_BED} ${SSD_IBCSO_BED_WGS84} ${SSD_IBCSO_ICESURF} ${SSD_IBCSO_ICESURF_WGS84}; do
	echo "[INFO]      Converting < ${DBM} >    --->    < ${DBM%.*}.nc >"
	# convert
	srun gdal_translate -of "netCDF" -ot "Int16" "${DBM}" ${DBM%.*}.nc
	# add metadata to netCDFs
	echo "[INFO]      Adding metadata to < ${DBM%.*}.nc >"
	srun ncrename -O -h -v Band1,"${VAR_NAME}" ${DBM%.*}.nc #rename variable (Band1 --> depth)
	srun ncatted -O -h -a title,global,o,c,"${METATAG_NAME}" ${DBM%.*}.nc
	srun ncatted -O -h -a institution,global,o,c,"${METATAG_INSTITUTION}" ${DBM%.*}.nc
	srun ncatted -O -h -a contact,global,o,c,"${METATAG_CONTACT}" ${DBM%.*}.nc
	srun ncatted -O -h -a comment,global,o,c,"${METATAG_DESCRIPTION}" ${DBM%.*}.nc
	srun ncatted -O -h -a doi,global,o,c,"${METATAG_DOI}" ${DBM%.*}.nc
	srun ncatted -O -h -a IBCSO_version,global,o,f,${METATAG_VERSION} ${DBM%.*}.nc
	srun ncatted -O -h -a long_name,${VAR_NAME},o,c,"${LONG_NAME}" -a units,${VAR_NAME},c,c,"m" ${DBM%.*}.nc
	srun ncatted -O -h -a history,global,d,, ${DBM%.*}.nc #remove history
	srun ncatted -O -h -a GDAL,global,d,, -a GDAL_AREA_OR_POINT,global,d,, ${DBM%.*}.nc #remove obsolete GDAL tags
	
	# add metadata to GeoTIFFs
	echo "[INFO]      Adding metadata to < ${DBM} >"
	srun gdal_edit.py -stats -mo NAME="${METATAG_NAME}" -mo VERSION="${METATAG_VERSION}" -mo DESCRIPTION="${METATAG_DESCRIPTION}" -mo INSTITUTION="${METATAG_INSTITUTION}" -mo CONTACT_PERSON="${METATAG_CONTACT_PERSON}" -mo CONTACT_EMAIL="${METATAG_CONTACT_EMAIL}" -mo DOI="${METATAG_DOI}" -mo PARAMETER_NAME="${METATAG_PARAMETER_NAME}" -mo PARAMETER_UNIT="${METATAG_PARAMETER_UNIT}" ${DBM}
	python ${GDAL_SETBANDNAME_SCRIPT} ${DBM} 1 "${LONG_NAME}"
done

## Auxiliary grids
for AUX in ${SSD_RID_SRTM} ${SSD_TID_SRTM}; do
	echo "[INFO]      Converting < ${AUX} >    --->    < ${AUX%.*}.nc >"
	# convert
	srun gdal_translate -of "netCDF" -ot "Int16" ${AUX} ${AUX%.*}.nc
	# add metadata to netCDFs
	srun ncatted -O -h -a title,global,o,c,"${METATAG_NAME}" ${AUX%.*}.nc
	srun ncatted -O -h -a institution,global,o,c,"${METATAG_INSTITUTION}" ${AUX%.*}.nc
	srun ncatted -O -h -a contact,global,o,c,"${METATAG_CONTACT}" ${AUX%.*}.nc
	srun ncatted -O -h -a comment,global,o,c,"${METATAG_DESCRIPTION}" ${AUX%.*}.nc
	srun ncatted -O -h -a doi,global,o,c,"${METATAG_DOI}" ${AUX%.*}.nc
	srun ncatted -O -h -a IBCSO_version,global,o,f,${METATAG_VERSION} ${AUX%.*}.nc
	srun ncatted -O -h -a history,global,d,, ${AUX%.*}.nc #remove history
	srun ncatted -O -h -a GDAL,global,d,, -a GDAL_AREA_OR_POINT,global,d,, ${AUX%.*}.nc #remove obsolete GDAL tags
done

## RID (unique settings)
srun ncrename -O -h -v Band1,"rid" ${SSD_RID_SRTM%.*}.nc
srun ncatted -O -h -a long_name,"rid",o,c,"regional_identifier" ${SSD_RID_SRTM%.*}.nc
srun gdal_edit.py -stats -mo NAME="${METATAG_NAME}" -mo VERSION="${METATAG_VERSION}" -mo DESCRIPTION="${METATAG_DESCRIPTION}" -mo INSTITUTION="${METATAG_INSTITUTION}" -mo CONTACT_PERSON="${METATAG_CONTACT_PERSON}" -mo CONTACT_EMAIL="${METATAG_CONTACT_EMAIL}" -mo DOI="${METATAG_DOI}" -mo PARAMETER_NAME="regional_identifier" ${SSD_RID_SRTM}
python ${GDAL_SETBANDNAME_SCRIPT} ${SSD_RID_SRTM} 1 "rid"

## TID (unique settings)
srun ncrename -O -h -v Band1,"tid" ${SSD_TID_SRTM%.*}.nc
srun ncatted -O -h -a long_name,"tid",o,c,"data_type_identifier" ${SSD_TID_SRTM%.*}.nc
srun gdal_edit.py -stats -mo NAME="${METATAG_NAME}" -mo VERSION="${METATAG_VERSION}" -mo DESCRIPTION="${METATAG_DESCRIPTION}" -mo INSTITUTION="${METATAG_INSTITUTION}" -mo CONTACT_PERSON="${METATAG_CONTACT_PERSON}" -mo CONTACT_EMAIL="${METATAG_CONTACT_EMAIL}" -mo DOI="${METATAG_DOI}" -mo PARAMETER_NAME="data_type_identifier" ${SSD_TID_SRTM}
python ${GDAL_SETBANDNAME_SCRIPT} ${SSD_TID_SRTM} 1 "tid"

# UPDATE "in_current_product" column in SQL database
echo -e "[INFO]    Updating 'in_current_product' column in 'metadata' with count of filled cells..."
python ${PYDIR}/D7_cnt_cells_per_uniq_RID.py ${SSD_RID} ${SSD_OCEAN_MASK} #--verbose 2
echo ""

# CREATE EXTERNAL PYRAMIDS
echo -e "[INFO]    Creating pyramids (averaged) for selected, large GeoTIFFs..."
for file in ${SSD_COMPOSITE} ${SSD_IBCSO_BED} ${SSD_IBCSO_BED_WGS84} ${SSD_IBCSO_ICESURF} ${SSD_IBCSO_ICESURF_WGS84} ${SSD_STD_DEV}; do
	srun gdaladdo -ro -r average --config COMPRESS_OVERVIEW DEFLATE --config PREDICTOR_OVERVIEW 2 --config ZLEVEL_OVERVIEW 6 ${file} 
done

# HOUSEKEEPING
rm ${SSD_COMPOSITE} ${SSD_RID} ${SSD_TID} ${SSD_Q25_FILE} ${SSD_Q75_FILE} ${SSD_ICESURFACE} ${SSD_MASK_SOUTH_50_DEG} # remove copied input files
rm  ${SSD_IBCSO_BED_TMP} ${SSD_IBCSO_ICESURF_TMP} ${SSD_RID_SRTM_TMP} ${SSD_TID_SRTM_TMP} # remove temp files
mv ${SSD_DIR}/*.tif ${RASTERPRODUCT} # move all GeoTIFF raster files
mv ${SSD_DIR}/*.ovr ${RASTERPRODUCT} # move all GeoTIFF overview files
mv ${SSD_DIR}/*.nc ${GRIDPRODUCT} # move all netCDF files
rm ${SSD_DIR}/*.tif ${SSD_DIR}/*.ovr ${SSD_DIR}/*.nc 2>/dev/null

END_TIME=$(date -u +"%Y-%m-%d %T")
END_UNIX=$(date -u +%s%3N) #unix time in ms
echo "END TIME:	$END_TIME"
echo "CSVLINE	$SLURM_JOB_NAME	$SLURM_JOB_ID	$SLURM_ARRAY_TASK_ID	$SLURM_ARRAY_TASK_COUNT	$EVOKER	$SLURM_JOB_PARTITION	$FILESIZE_TRUE	$START_UNIX	$END_UNIX"
